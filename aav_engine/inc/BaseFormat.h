#ifndef _BASEFORMAT_H_
#define _BASEFORMAT_H_

#include <stdint.h>

enum BASE_FORMAT {
  BASE_FORMAT_UNKNOWN = 0,

  // Malware Name
  BASE_FORMAT_TYPE = 10,
  BASE_FORMAT_FAMILY,
  BASE_FORMAT_VARIANT,
  BASE_FORMAT_PLATFORM,
  BASE_FORMAT_FILE_FORMAT,
  BASE_FORMAT_NAME,
  BASE_FORMAT_SIG,

  // Ad info format
  BASE_FORMAT_AD_INFO = 20,

  // DEX format
  BASE_FORMAT_DEX_PATH = 30,
  BASE_FORMAT_DEX_OPCODE_MAP,
  BASE_FORMAT_DEX_OPCODE_CRC,
  BASE_FORMAT_DEX_OPERAND_CRC,
  BASE_FORMAT_DEX_CODE_LOGIC,

  // ELF format
  BASE_FORMAT_ELF_ARM = 40,
  BASE_FORMAT_ELF_ARM64,
  BASE_FORMAT_ELF_X86,
  BASE_FORMAT_ELF_X86_64,
  BASE_FORMAT_ELF_MIPS,
  BASE_FORMAT_ELF_MIPS64,

  // OAT format
  BASE_FORMAT_OAT_ARM = 50,
  BASE_FORMAT_OAT_ARM64,
  BASE_FORMAT_OAT_X86,
  BASE_FORMAT_OAT_X86_64,
  BASE_FORMAT_OAT_MIPS,
  BASE_FORMAT_OAT_MIPS64,

  // Mach-O format
  BASE_FORMAT_MACHO_ARM = 60,
  BASE_FORMAT_MACHO_ARM64,
  BASE_FORMAT_MACHO_X86,
  BASE_FORMAT_MACHO_X86_64,
  BASE_FORMAT_MACHO_MIPS,
  BASE_FORMAT_MACHO_MIPS64,

  // PE format
  BASE_FORMAT_PE_ARM = 70,
  BASE_FORMAT_PE_ARM64,
  BASE_FORMAT_PE_X86,
  BASE_FORMAT_PE_X86_64,
  BASE_FORMAT_PE_MIPS,
  BASE_FORMAT_PE_MIPS64,

  // White format
  BASE_FORMAT_WHITE_APK = 80,
  BASE_FORMAT_WHITE_DEX,
  BASE_FORMAT_WHITE_ELF,
  BASE_FORMAT_WHITE_OAT,
};

typedef struct SIG_ITEM {
  uint32_t format;
  uint32_t sigCount;
  void* buf;
  uint32_t bufSize;
} SIG_ITEM;

#endif
